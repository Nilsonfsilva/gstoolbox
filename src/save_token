#!/usr/bin/env bash

USER_DATA_FILE="$HOME/.config/gstoolbox/token"

PLATFORM=$2
USERNAME=$3
TOKEN=$4

mkdir -p "$(dirname "$USER_DATA_FILE")"

# Verifica se o arquivo existe
if [ -f "$USER_DATA_FILE" ]; then
    TOKEN_ATUALIZADO=false
    while IFS= read -r line; do
        FILE_PROJECT=$(echo "$line" | awk '{print $1}')
        FILE_USER=$(echo "$line" | awk '{print $2}')
        FILE_TOKEN=$(echo "$line" | awk '{print $3}')

        # Check if PROJECT, USER match and TOKEN is different
        if [ "$FILE_PROJECT" == "$PLATFORM" ] && [ "$FILE_USER" == "$USERNAME" ] && [ "$FILE_TOKEN" != "$TOKEN" ]; then
            read -r -p "Do you want to upgrade TOKEN to $TOKEN (y/n): " response </dev/tty
            if [[ "$response" == "y" ]]; then
                sed -i "/^$PLATFORM $USERNAME /c\\$PLATFORM $USERNAME $TOKEN" "$USER_DATA_FILE"
                echo "Token successfully updated!"
                TOKEN_ATUALIZADO=true
                break
            else
                echo "Token has not been updated."
                TOKEN_ATUALIZADO=true
                break
            fi
        elif [ "$FILE_PROJECT" == "$PLATFORM" ] && [ "$FILE_USER" == "$USERNAME" ] && [ "$FILE_TOKEN" == "$TOKEN" ]; then
            echo "TOKEN is already updated for this project and user!"
            TOKEN_ATUALIZADO=true
            break
        fi
    done < "$USER_DATA_FILE"

    # If no data was found for PROJECT and USER
    if [ "$TOKEN_ATUALIZADO" = false ]; then
       read -r -p "Do you want to save the Token for later use (y/n): " response </dev/tty
       if [[ "$response" == "y" ]]; then
        echo "$PLATFORM $USERNAME $TOKEN" >> "$USER_DATA_FILE"
       fi
    fi
else
    # If the file does not exist, create a new one and add the data
    echo "$PLATFORM $USERNAME $TOKEN" > "$USER_DATA_FILE"
fi
